// source: server.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var physics_pb = require('./physics_pb.js');
goog.object.extend(proto, physics_pb);
goog.exportSymbol('proto.lugo.Ball', null, global);
goog.exportSymbol('proto.lugo.Catch', null, global);
goog.exportSymbol('proto.lugo.GameSnapshot', null, global);
goog.exportSymbol('proto.lugo.GameSnapshot.State', null, global);
goog.exportSymbol('proto.lugo.JoinRequest', null, global);
goog.exportSymbol('proto.lugo.Jump', null, global);
goog.exportSymbol('proto.lugo.Kick', null, global);
goog.exportSymbol('proto.lugo.Move', null, global);
goog.exportSymbol('proto.lugo.Order', null, global);
goog.exportSymbol('proto.lugo.Order.ActionCase', null, global);
goog.exportSymbol('proto.lugo.OrderResponse', null, global);
goog.exportSymbol('proto.lugo.OrderResponse.StatusCode', null, global);
goog.exportSymbol('proto.lugo.OrderSet', null, global);
goog.exportSymbol('proto.lugo.Player', null, global);
goog.exportSymbol('proto.lugo.ShotClock', null, global);
goog.exportSymbol('proto.lugo.Team', null, global);
goog.exportSymbol('proto.lugo.Team.Side', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lugo.JoinRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lugo.JoinRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lugo.JoinRequest.displayName = 'proto.lugo.JoinRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lugo.GameSnapshot = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lugo.GameSnapshot, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lugo.GameSnapshot.displayName = 'proto.lugo.GameSnapshot';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lugo.Team = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.lugo.Team.repeatedFields_, null);
};
goog.inherits(proto.lugo.Team, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lugo.Team.displayName = 'proto.lugo.Team';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lugo.ShotClock = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lugo.ShotClock, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lugo.ShotClock.displayName = 'proto.lugo.ShotClock';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lugo.Player = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lugo.Player, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lugo.Player.displayName = 'proto.lugo.Player';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lugo.Ball = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lugo.Ball, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lugo.Ball.displayName = 'proto.lugo.Ball';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lugo.OrderResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lugo.OrderResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lugo.OrderResponse.displayName = 'proto.lugo.OrderResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lugo.OrderSet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.lugo.OrderSet.repeatedFields_, null);
};
goog.inherits(proto.lugo.OrderSet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lugo.OrderSet.displayName = 'proto.lugo.OrderSet';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lugo.Order = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.lugo.Order.oneofGroups_);
};
goog.inherits(proto.lugo.Order, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lugo.Order.displayName = 'proto.lugo.Order';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lugo.Move = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lugo.Move, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lugo.Move.displayName = 'proto.lugo.Move';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lugo.Catch = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lugo.Catch, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lugo.Catch.displayName = 'proto.lugo.Catch';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lugo.Kick = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lugo.Kick, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lugo.Kick.displayName = 'proto.lugo.Kick';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lugo.Jump = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lugo.Jump, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lugo.Jump.displayName = 'proto.lugo.Jump';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lugo.JoinRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.lugo.JoinRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lugo.JoinRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lugo.JoinRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    token: jspb.Message.getFieldWithDefault(msg, 1, ""),
    protocolVersion: jspb.Message.getFieldWithDefault(msg, 2, ""),
    teamSide: jspb.Message.getFieldWithDefault(msg, 3, 0),
    number: jspb.Message.getFieldWithDefault(msg, 4, 0),
    initPosition: (f = msg.getInitPosition()) && physics_pb.Point.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lugo.JoinRequest}
 */
proto.lugo.JoinRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lugo.JoinRequest;
  return proto.lugo.JoinRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lugo.JoinRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lugo.JoinRequest}
 */
proto.lugo.JoinRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setProtocolVersion(value);
      break;
    case 3:
      var value = /** @type {!proto.lugo.Team.Side} */ (reader.readEnum());
      msg.setTeamSide(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNumber(value);
      break;
    case 5:
      var value = new physics_pb.Point;
      reader.readMessage(value,physics_pb.Point.deserializeBinaryFromReader);
      msg.setInitPosition(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lugo.JoinRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lugo.JoinRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lugo.JoinRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lugo.JoinRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getProtocolVersion();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTeamSide();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getNumber();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getInitPosition();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      physics_pb.Point.serializeBinaryToWriter
    );
  }
};


/**
 * optional string token = 1;
 * @return {string}
 */
proto.lugo.JoinRequest.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.lugo.JoinRequest} returns this
 */
proto.lugo.JoinRequest.prototype.setToken = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string protocol_version = 2;
 * @return {string}
 */
proto.lugo.JoinRequest.prototype.getProtocolVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.lugo.JoinRequest} returns this
 */
proto.lugo.JoinRequest.prototype.setProtocolVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Team.Side team_side = 3;
 * @return {!proto.lugo.Team.Side}
 */
proto.lugo.JoinRequest.prototype.getTeamSide = function() {
  return /** @type {!proto.lugo.Team.Side} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.lugo.Team.Side} value
 * @return {!proto.lugo.JoinRequest} returns this
 */
proto.lugo.JoinRequest.prototype.setTeamSide = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional uint32 number = 4;
 * @return {number}
 */
proto.lugo.JoinRequest.prototype.getNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.lugo.JoinRequest} returns this
 */
proto.lugo.JoinRequest.prototype.setNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional Point init_position = 5;
 * @return {?proto.lugo.Point}
 */
proto.lugo.JoinRequest.prototype.getInitPosition = function() {
  return /** @type{?proto.lugo.Point} */ (
    jspb.Message.getWrapperField(this, physics_pb.Point, 5));
};


/**
 * @param {?proto.lugo.Point|undefined} value
 * @return {!proto.lugo.JoinRequest} returns this
*/
proto.lugo.JoinRequest.prototype.setInitPosition = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lugo.JoinRequest} returns this
 */
proto.lugo.JoinRequest.prototype.clearInitPosition = function() {
  return this.setInitPosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lugo.JoinRequest.prototype.hasInitPosition = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lugo.GameSnapshot.prototype.toObject = function(opt_includeInstance) {
  return proto.lugo.GameSnapshot.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lugo.GameSnapshot} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lugo.GameSnapshot.toObject = function(includeInstance, msg) {
  var f, obj = {
    state: jspb.Message.getFieldWithDefault(msg, 1, 0),
    turn: jspb.Message.getFieldWithDefault(msg, 2, 0),
    homeTeam: (f = msg.getHomeTeam()) && proto.lugo.Team.toObject(includeInstance, f),
    awayTeam: (f = msg.getAwayTeam()) && proto.lugo.Team.toObject(includeInstance, f),
    ball: (f = msg.getBall()) && proto.lugo.Ball.toObject(includeInstance, f),
    turnsBallInGoalZone: jspb.Message.getFieldWithDefault(msg, 6, 0),
    shotClock: (f = msg.getShotClock()) && proto.lugo.ShotClock.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lugo.GameSnapshot}
 */
proto.lugo.GameSnapshot.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lugo.GameSnapshot;
  return proto.lugo.GameSnapshot.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lugo.GameSnapshot} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lugo.GameSnapshot}
 */
proto.lugo.GameSnapshot.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.lugo.GameSnapshot.State} */ (reader.readEnum());
      msg.setState(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTurn(value);
      break;
    case 3:
      var value = new proto.lugo.Team;
      reader.readMessage(value,proto.lugo.Team.deserializeBinaryFromReader);
      msg.setHomeTeam(value);
      break;
    case 4:
      var value = new proto.lugo.Team;
      reader.readMessage(value,proto.lugo.Team.deserializeBinaryFromReader);
      msg.setAwayTeam(value);
      break;
    case 5:
      var value = new proto.lugo.Ball;
      reader.readMessage(value,proto.lugo.Ball.deserializeBinaryFromReader);
      msg.setBall(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTurnsBallInGoalZone(value);
      break;
    case 7:
      var value = new proto.lugo.ShotClock;
      reader.readMessage(value,proto.lugo.ShotClock.deserializeBinaryFromReader);
      msg.setShotClock(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lugo.GameSnapshot.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lugo.GameSnapshot.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lugo.GameSnapshot} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lugo.GameSnapshot.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getTurn();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getHomeTeam();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.lugo.Team.serializeBinaryToWriter
    );
  }
  f = message.getAwayTeam();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.lugo.Team.serializeBinaryToWriter
    );
  }
  f = message.getBall();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.lugo.Ball.serializeBinaryToWriter
    );
  }
  f = message.getTurnsBallInGoalZone();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getShotClock();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.lugo.ShotClock.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.lugo.GameSnapshot.State = {
  WAITING: 0,
  GET_READY: 1,
  LISTENING: 2,
  PLAYING: 3,
  SHIFTING: 4,
  OVER: 99
};

/**
 * optional State state = 1;
 * @return {!proto.lugo.GameSnapshot.State}
 */
proto.lugo.GameSnapshot.prototype.getState = function() {
  return /** @type {!proto.lugo.GameSnapshot.State} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.lugo.GameSnapshot.State} value
 * @return {!proto.lugo.GameSnapshot} returns this
 */
proto.lugo.GameSnapshot.prototype.setState = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional uint32 turn = 2;
 * @return {number}
 */
proto.lugo.GameSnapshot.prototype.getTurn = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.lugo.GameSnapshot} returns this
 */
proto.lugo.GameSnapshot.prototype.setTurn = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional Team home_team = 3;
 * @return {?proto.lugo.Team}
 */
proto.lugo.GameSnapshot.prototype.getHomeTeam = function() {
  return /** @type{?proto.lugo.Team} */ (
    jspb.Message.getWrapperField(this, proto.lugo.Team, 3));
};


/**
 * @param {?proto.lugo.Team|undefined} value
 * @return {!proto.lugo.GameSnapshot} returns this
*/
proto.lugo.GameSnapshot.prototype.setHomeTeam = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lugo.GameSnapshot} returns this
 */
proto.lugo.GameSnapshot.prototype.clearHomeTeam = function() {
  return this.setHomeTeam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lugo.GameSnapshot.prototype.hasHomeTeam = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Team away_team = 4;
 * @return {?proto.lugo.Team}
 */
proto.lugo.GameSnapshot.prototype.getAwayTeam = function() {
  return /** @type{?proto.lugo.Team} */ (
    jspb.Message.getWrapperField(this, proto.lugo.Team, 4));
};


/**
 * @param {?proto.lugo.Team|undefined} value
 * @return {!proto.lugo.GameSnapshot} returns this
*/
proto.lugo.GameSnapshot.prototype.setAwayTeam = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lugo.GameSnapshot} returns this
 */
proto.lugo.GameSnapshot.prototype.clearAwayTeam = function() {
  return this.setAwayTeam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lugo.GameSnapshot.prototype.hasAwayTeam = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Ball ball = 5;
 * @return {?proto.lugo.Ball}
 */
proto.lugo.GameSnapshot.prototype.getBall = function() {
  return /** @type{?proto.lugo.Ball} */ (
    jspb.Message.getWrapperField(this, proto.lugo.Ball, 5));
};


/**
 * @param {?proto.lugo.Ball|undefined} value
 * @return {!proto.lugo.GameSnapshot} returns this
*/
proto.lugo.GameSnapshot.prototype.setBall = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lugo.GameSnapshot} returns this
 */
proto.lugo.GameSnapshot.prototype.clearBall = function() {
  return this.setBall(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lugo.GameSnapshot.prototype.hasBall = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional uint32 turns_ball_in_goal_zone = 6;
 * @return {number}
 */
proto.lugo.GameSnapshot.prototype.getTurnsBallInGoalZone = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.lugo.GameSnapshot} returns this
 */
proto.lugo.GameSnapshot.prototype.setTurnsBallInGoalZone = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional ShotClock shot_clock = 7;
 * @return {?proto.lugo.ShotClock}
 */
proto.lugo.GameSnapshot.prototype.getShotClock = function() {
  return /** @type{?proto.lugo.ShotClock} */ (
    jspb.Message.getWrapperField(this, proto.lugo.ShotClock, 7));
};


/**
 * @param {?proto.lugo.ShotClock|undefined} value
 * @return {!proto.lugo.GameSnapshot} returns this
*/
proto.lugo.GameSnapshot.prototype.setShotClock = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lugo.GameSnapshot} returns this
 */
proto.lugo.GameSnapshot.prototype.clearShotClock = function() {
  return this.setShotClock(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lugo.GameSnapshot.prototype.hasShotClock = function() {
  return jspb.Message.getField(this, 7) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.lugo.Team.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lugo.Team.prototype.toObject = function(opt_includeInstance) {
  return proto.lugo.Team.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lugo.Team} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lugo.Team.toObject = function(includeInstance, msg) {
  var f, obj = {
    playersList: jspb.Message.toObjectList(msg.getPlayersList(),
    proto.lugo.Player.toObject, includeInstance),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    score: jspb.Message.getFieldWithDefault(msg, 3, 0),
    side: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lugo.Team}
 */
proto.lugo.Team.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lugo.Team;
  return proto.lugo.Team.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lugo.Team} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lugo.Team}
 */
proto.lugo.Team.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.lugo.Player;
      reader.readMessage(value,proto.lugo.Player.deserializeBinaryFromReader);
      msg.addPlayers(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setScore(value);
      break;
    case 4:
      var value = /** @type {!proto.lugo.Team.Side} */ (reader.readEnum());
      msg.setSide(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lugo.Team.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lugo.Team.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lugo.Team} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lugo.Team.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.lugo.Player.serializeBinaryToWriter
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getScore();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getSide();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.lugo.Team.Side = {
  HOME: 0,
  AWAY: 1
};

/**
 * repeated Player players = 1;
 * @return {!Array<!proto.lugo.Player>}
 */
proto.lugo.Team.prototype.getPlayersList = function() {
  return /** @type{!Array<!proto.lugo.Player>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.lugo.Player, 1));
};


/**
 * @param {!Array<!proto.lugo.Player>} value
 * @return {!proto.lugo.Team} returns this
*/
proto.lugo.Team.prototype.setPlayersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.lugo.Player=} opt_value
 * @param {number=} opt_index
 * @return {!proto.lugo.Player}
 */
proto.lugo.Team.prototype.addPlayers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.lugo.Player, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.lugo.Team} returns this
 */
proto.lugo.Team.prototype.clearPlayersList = function() {
  return this.setPlayersList([]);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.lugo.Team.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.lugo.Team} returns this
 */
proto.lugo.Team.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint32 score = 3;
 * @return {number}
 */
proto.lugo.Team.prototype.getScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.lugo.Team} returns this
 */
proto.lugo.Team.prototype.setScore = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional Side side = 4;
 * @return {!proto.lugo.Team.Side}
 */
proto.lugo.Team.prototype.getSide = function() {
  return /** @type {!proto.lugo.Team.Side} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.lugo.Team.Side} value
 * @return {!proto.lugo.Team} returns this
 */
proto.lugo.Team.prototype.setSide = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lugo.ShotClock.prototype.toObject = function(opt_includeInstance) {
  return proto.lugo.ShotClock.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lugo.ShotClock} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lugo.ShotClock.toObject = function(includeInstance, msg) {
  var f, obj = {
    teamSide: jspb.Message.getFieldWithDefault(msg, 6, 0),
    remainingTurns: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lugo.ShotClock}
 */
proto.lugo.ShotClock.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lugo.ShotClock;
  return proto.lugo.ShotClock.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lugo.ShotClock} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lugo.ShotClock}
 */
proto.lugo.ShotClock.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 6:
      var value = /** @type {!proto.lugo.Team.Side} */ (reader.readEnum());
      msg.setTeamSide(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRemainingTurns(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lugo.ShotClock.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lugo.ShotClock.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lugo.ShotClock} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lugo.ShotClock.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTeamSide();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getRemainingTurns();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
};


/**
 * optional Team.Side team_side = 6;
 * @return {!proto.lugo.Team.Side}
 */
proto.lugo.ShotClock.prototype.getTeamSide = function() {
  return /** @type {!proto.lugo.Team.Side} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {!proto.lugo.Team.Side} value
 * @return {!proto.lugo.ShotClock} returns this
 */
proto.lugo.ShotClock.prototype.setTeamSide = function(value) {
  return jspb.Message.setProto3EnumField(this, 6, value);
};


/**
 * optional uint32 remaining_turns = 7;
 * @return {number}
 */
proto.lugo.ShotClock.prototype.getRemainingTurns = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.lugo.ShotClock} returns this
 */
proto.lugo.ShotClock.prototype.setRemainingTurns = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lugo.Player.prototype.toObject = function(opt_includeInstance) {
  return proto.lugo.Player.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lugo.Player} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lugo.Player.toObject = function(includeInstance, msg) {
  var f, obj = {
    number: jspb.Message.getFieldWithDefault(msg, 1, 0),
    position: (f = msg.getPosition()) && physics_pb.Point.toObject(includeInstance, f),
    velocity: (f = msg.getVelocity()) && physics_pb.Velocity.toObject(includeInstance, f),
    teamSide: jspb.Message.getFieldWithDefault(msg, 4, 0),
    initPosition: (f = msg.getInitPosition()) && physics_pb.Point.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lugo.Player}
 */
proto.lugo.Player.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lugo.Player;
  return proto.lugo.Player.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lugo.Player} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lugo.Player}
 */
proto.lugo.Player.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNumber(value);
      break;
    case 2:
      var value = new physics_pb.Point;
      reader.readMessage(value,physics_pb.Point.deserializeBinaryFromReader);
      msg.setPosition(value);
      break;
    case 3:
      var value = new physics_pb.Velocity;
      reader.readMessage(value,physics_pb.Velocity.deserializeBinaryFromReader);
      msg.setVelocity(value);
      break;
    case 4:
      var value = /** @type {!proto.lugo.Team.Side} */ (reader.readEnum());
      msg.setTeamSide(value);
      break;
    case 5:
      var value = new physics_pb.Point;
      reader.readMessage(value,physics_pb.Point.deserializeBinaryFromReader);
      msg.setInitPosition(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lugo.Player.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lugo.Player.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lugo.Player} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lugo.Player.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNumber();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getPosition();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      physics_pb.Point.serializeBinaryToWriter
    );
  }
  f = message.getVelocity();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      physics_pb.Velocity.serializeBinaryToWriter
    );
  }
  f = message.getTeamSide();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getInitPosition();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      physics_pb.Point.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 number = 1;
 * @return {number}
 */
proto.lugo.Player.prototype.getNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.lugo.Player} returns this
 */
proto.lugo.Player.prototype.setNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional Point position = 2;
 * @return {?proto.lugo.Point}
 */
proto.lugo.Player.prototype.getPosition = function() {
  return /** @type{?proto.lugo.Point} */ (
    jspb.Message.getWrapperField(this, physics_pb.Point, 2));
};


/**
 * @param {?proto.lugo.Point|undefined} value
 * @return {!proto.lugo.Player} returns this
*/
proto.lugo.Player.prototype.setPosition = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lugo.Player} returns this
 */
proto.lugo.Player.prototype.clearPosition = function() {
  return this.setPosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lugo.Player.prototype.hasPosition = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Velocity velocity = 3;
 * @return {?proto.lugo.Velocity}
 */
proto.lugo.Player.prototype.getVelocity = function() {
  return /** @type{?proto.lugo.Velocity} */ (
    jspb.Message.getWrapperField(this, physics_pb.Velocity, 3));
};


/**
 * @param {?proto.lugo.Velocity|undefined} value
 * @return {!proto.lugo.Player} returns this
*/
proto.lugo.Player.prototype.setVelocity = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lugo.Player} returns this
 */
proto.lugo.Player.prototype.clearVelocity = function() {
  return this.setVelocity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lugo.Player.prototype.hasVelocity = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Team.Side team_side = 4;
 * @return {!proto.lugo.Team.Side}
 */
proto.lugo.Player.prototype.getTeamSide = function() {
  return /** @type {!proto.lugo.Team.Side} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.lugo.Team.Side} value
 * @return {!proto.lugo.Player} returns this
 */
proto.lugo.Player.prototype.setTeamSide = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional Point init_position = 5;
 * @return {?proto.lugo.Point}
 */
proto.lugo.Player.prototype.getInitPosition = function() {
  return /** @type{?proto.lugo.Point} */ (
    jspb.Message.getWrapperField(this, physics_pb.Point, 5));
};


/**
 * @param {?proto.lugo.Point|undefined} value
 * @return {!proto.lugo.Player} returns this
*/
proto.lugo.Player.prototype.setInitPosition = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lugo.Player} returns this
 */
proto.lugo.Player.prototype.clearInitPosition = function() {
  return this.setInitPosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lugo.Player.prototype.hasInitPosition = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lugo.Ball.prototype.toObject = function(opt_includeInstance) {
  return proto.lugo.Ball.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lugo.Ball} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lugo.Ball.toObject = function(includeInstance, msg) {
  var f, obj = {
    position: (f = msg.getPosition()) && physics_pb.Point.toObject(includeInstance, f),
    velocity: (f = msg.getVelocity()) && physics_pb.Velocity.toObject(includeInstance, f),
    holder: (f = msg.getHolder()) && proto.lugo.Player.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lugo.Ball}
 */
proto.lugo.Ball.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lugo.Ball;
  return proto.lugo.Ball.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lugo.Ball} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lugo.Ball}
 */
proto.lugo.Ball.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new physics_pb.Point;
      reader.readMessage(value,physics_pb.Point.deserializeBinaryFromReader);
      msg.setPosition(value);
      break;
    case 2:
      var value = new physics_pb.Velocity;
      reader.readMessage(value,physics_pb.Velocity.deserializeBinaryFromReader);
      msg.setVelocity(value);
      break;
    case 3:
      var value = new proto.lugo.Player;
      reader.readMessage(value,proto.lugo.Player.deserializeBinaryFromReader);
      msg.setHolder(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lugo.Ball.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lugo.Ball.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lugo.Ball} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lugo.Ball.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPosition();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      physics_pb.Point.serializeBinaryToWriter
    );
  }
  f = message.getVelocity();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      physics_pb.Velocity.serializeBinaryToWriter
    );
  }
  f = message.getHolder();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.lugo.Player.serializeBinaryToWriter
    );
  }
};


/**
 * optional Point position = 1;
 * @return {?proto.lugo.Point}
 */
proto.lugo.Ball.prototype.getPosition = function() {
  return /** @type{?proto.lugo.Point} */ (
    jspb.Message.getWrapperField(this, physics_pb.Point, 1));
};


/**
 * @param {?proto.lugo.Point|undefined} value
 * @return {!proto.lugo.Ball} returns this
*/
proto.lugo.Ball.prototype.setPosition = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lugo.Ball} returns this
 */
proto.lugo.Ball.prototype.clearPosition = function() {
  return this.setPosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lugo.Ball.prototype.hasPosition = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Velocity velocity = 2;
 * @return {?proto.lugo.Velocity}
 */
proto.lugo.Ball.prototype.getVelocity = function() {
  return /** @type{?proto.lugo.Velocity} */ (
    jspb.Message.getWrapperField(this, physics_pb.Velocity, 2));
};


/**
 * @param {?proto.lugo.Velocity|undefined} value
 * @return {!proto.lugo.Ball} returns this
*/
proto.lugo.Ball.prototype.setVelocity = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lugo.Ball} returns this
 */
proto.lugo.Ball.prototype.clearVelocity = function() {
  return this.setVelocity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lugo.Ball.prototype.hasVelocity = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Player holder = 3;
 * @return {?proto.lugo.Player}
 */
proto.lugo.Ball.prototype.getHolder = function() {
  return /** @type{?proto.lugo.Player} */ (
    jspb.Message.getWrapperField(this, proto.lugo.Player, 3));
};


/**
 * @param {?proto.lugo.Player|undefined} value
 * @return {!proto.lugo.Ball} returns this
*/
proto.lugo.Ball.prototype.setHolder = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lugo.Ball} returns this
 */
proto.lugo.Ball.prototype.clearHolder = function() {
  return this.setHolder(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lugo.Ball.prototype.hasHolder = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lugo.OrderResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.lugo.OrderResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lugo.OrderResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lugo.OrderResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    details: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lugo.OrderResponse}
 */
proto.lugo.OrderResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lugo.OrderResponse;
  return proto.lugo.OrderResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lugo.OrderResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lugo.OrderResponse}
 */
proto.lugo.OrderResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.lugo.OrderResponse.StatusCode} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDetails(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lugo.OrderResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lugo.OrderResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lugo.OrderResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lugo.OrderResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDetails();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.lugo.OrderResponse.StatusCode = {
  SUCCESS: 0,
  UNKNOWN_PLAYER: 1,
  NOT_LISTENING: 2,
  WRONG_TURN: 3,
  OTHER: 99
};

/**
 * optional StatusCode code = 1;
 * @return {!proto.lugo.OrderResponse.StatusCode}
 */
proto.lugo.OrderResponse.prototype.getCode = function() {
  return /** @type {!proto.lugo.OrderResponse.StatusCode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.lugo.OrderResponse.StatusCode} value
 * @return {!proto.lugo.OrderResponse} returns this
 */
proto.lugo.OrderResponse.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string details = 2;
 * @return {string}
 */
proto.lugo.OrderResponse.prototype.getDetails = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.lugo.OrderResponse} returns this
 */
proto.lugo.OrderResponse.prototype.setDetails = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.lugo.OrderSet.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lugo.OrderSet.prototype.toObject = function(opt_includeInstance) {
  return proto.lugo.OrderSet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lugo.OrderSet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lugo.OrderSet.toObject = function(includeInstance, msg) {
  var f, obj = {
    turn: jspb.Message.getFieldWithDefault(msg, 1, 0),
    ordersList: jspb.Message.toObjectList(msg.getOrdersList(),
    proto.lugo.Order.toObject, includeInstance),
    debugMessage: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lugo.OrderSet}
 */
proto.lugo.OrderSet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lugo.OrderSet;
  return proto.lugo.OrderSet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lugo.OrderSet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lugo.OrderSet}
 */
proto.lugo.OrderSet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTurn(value);
      break;
    case 2:
      var value = new proto.lugo.Order;
      reader.readMessage(value,proto.lugo.Order.deserializeBinaryFromReader);
      msg.addOrders(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDebugMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lugo.OrderSet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lugo.OrderSet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lugo.OrderSet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lugo.OrderSet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTurn();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getOrdersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.lugo.Order.serializeBinaryToWriter
    );
  }
  f = message.getDebugMessage();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional uint32 turn = 1;
 * @return {number}
 */
proto.lugo.OrderSet.prototype.getTurn = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.lugo.OrderSet} returns this
 */
proto.lugo.OrderSet.prototype.setTurn = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated Order orders = 2;
 * @return {!Array<!proto.lugo.Order>}
 */
proto.lugo.OrderSet.prototype.getOrdersList = function() {
  return /** @type{!Array<!proto.lugo.Order>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.lugo.Order, 2));
};


/**
 * @param {!Array<!proto.lugo.Order>} value
 * @return {!proto.lugo.OrderSet} returns this
*/
proto.lugo.OrderSet.prototype.setOrdersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.lugo.Order=} opt_value
 * @param {number=} opt_index
 * @return {!proto.lugo.Order}
 */
proto.lugo.OrderSet.prototype.addOrders = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.lugo.Order, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.lugo.OrderSet} returns this
 */
proto.lugo.OrderSet.prototype.clearOrdersList = function() {
  return this.setOrdersList([]);
};


/**
 * optional string debug_message = 3;
 * @return {string}
 */
proto.lugo.OrderSet.prototype.getDebugMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.lugo.OrderSet} returns this
 */
proto.lugo.OrderSet.prototype.setDebugMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.lugo.Order.oneofGroups_ = [[1,2,3,4]];

/**
 * @enum {number}
 */
proto.lugo.Order.ActionCase = {
  ACTION_NOT_SET: 0,
  MOVE: 1,
  CATCH: 2,
  KICK: 3,
  JUMP: 4
};

/**
 * @return {proto.lugo.Order.ActionCase}
 */
proto.lugo.Order.prototype.getActionCase = function() {
  return /** @type {proto.lugo.Order.ActionCase} */(jspb.Message.computeOneofCase(this, proto.lugo.Order.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lugo.Order.prototype.toObject = function(opt_includeInstance) {
  return proto.lugo.Order.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lugo.Order} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lugo.Order.toObject = function(includeInstance, msg) {
  var f, obj = {
    move: (f = msg.getMove()) && proto.lugo.Move.toObject(includeInstance, f),
    pb_catch: (f = msg.getCatch()) && proto.lugo.Catch.toObject(includeInstance, f),
    kick: (f = msg.getKick()) && proto.lugo.Kick.toObject(includeInstance, f),
    jump: (f = msg.getJump()) && proto.lugo.Jump.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lugo.Order}
 */
proto.lugo.Order.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lugo.Order;
  return proto.lugo.Order.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lugo.Order} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lugo.Order}
 */
proto.lugo.Order.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.lugo.Move;
      reader.readMessage(value,proto.lugo.Move.deserializeBinaryFromReader);
      msg.setMove(value);
      break;
    case 2:
      var value = new proto.lugo.Catch;
      reader.readMessage(value,proto.lugo.Catch.deserializeBinaryFromReader);
      msg.setCatch(value);
      break;
    case 3:
      var value = new proto.lugo.Kick;
      reader.readMessage(value,proto.lugo.Kick.deserializeBinaryFromReader);
      msg.setKick(value);
      break;
    case 4:
      var value = new proto.lugo.Jump;
      reader.readMessage(value,proto.lugo.Jump.deserializeBinaryFromReader);
      msg.setJump(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lugo.Order.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lugo.Order.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lugo.Order} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lugo.Order.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMove();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.lugo.Move.serializeBinaryToWriter
    );
  }
  f = message.getCatch();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.lugo.Catch.serializeBinaryToWriter
    );
  }
  f = message.getKick();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.lugo.Kick.serializeBinaryToWriter
    );
  }
  f = message.getJump();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.lugo.Jump.serializeBinaryToWriter
    );
  }
};


/**
 * optional Move move = 1;
 * @return {?proto.lugo.Move}
 */
proto.lugo.Order.prototype.getMove = function() {
  return /** @type{?proto.lugo.Move} */ (
    jspb.Message.getWrapperField(this, proto.lugo.Move, 1));
};


/**
 * @param {?proto.lugo.Move|undefined} value
 * @return {!proto.lugo.Order} returns this
*/
proto.lugo.Order.prototype.setMove = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.lugo.Order.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lugo.Order} returns this
 */
proto.lugo.Order.prototype.clearMove = function() {
  return this.setMove(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lugo.Order.prototype.hasMove = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Catch catch = 2;
 * @return {?proto.lugo.Catch}
 */
proto.lugo.Order.prototype.getCatch = function() {
  return /** @type{?proto.lugo.Catch} */ (
    jspb.Message.getWrapperField(this, proto.lugo.Catch, 2));
};


/**
 * @param {?proto.lugo.Catch|undefined} value
 * @return {!proto.lugo.Order} returns this
*/
proto.lugo.Order.prototype.setCatch = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.lugo.Order.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lugo.Order} returns this
 */
proto.lugo.Order.prototype.clearCatch = function() {
  return this.setCatch(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lugo.Order.prototype.hasCatch = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Kick kick = 3;
 * @return {?proto.lugo.Kick}
 */
proto.lugo.Order.prototype.getKick = function() {
  return /** @type{?proto.lugo.Kick} */ (
    jspb.Message.getWrapperField(this, proto.lugo.Kick, 3));
};


/**
 * @param {?proto.lugo.Kick|undefined} value
 * @return {!proto.lugo.Order} returns this
*/
proto.lugo.Order.prototype.setKick = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.lugo.Order.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lugo.Order} returns this
 */
proto.lugo.Order.prototype.clearKick = function() {
  return this.setKick(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lugo.Order.prototype.hasKick = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Jump jump = 4;
 * @return {?proto.lugo.Jump}
 */
proto.lugo.Order.prototype.getJump = function() {
  return /** @type{?proto.lugo.Jump} */ (
    jspb.Message.getWrapperField(this, proto.lugo.Jump, 4));
};


/**
 * @param {?proto.lugo.Jump|undefined} value
 * @return {!proto.lugo.Order} returns this
*/
proto.lugo.Order.prototype.setJump = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.lugo.Order.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lugo.Order} returns this
 */
proto.lugo.Order.prototype.clearJump = function() {
  return this.setJump(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lugo.Order.prototype.hasJump = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lugo.Move.prototype.toObject = function(opt_includeInstance) {
  return proto.lugo.Move.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lugo.Move} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lugo.Move.toObject = function(includeInstance, msg) {
  var f, obj = {
    velocity: (f = msg.getVelocity()) && physics_pb.Velocity.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lugo.Move}
 */
proto.lugo.Move.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lugo.Move;
  return proto.lugo.Move.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lugo.Move} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lugo.Move}
 */
proto.lugo.Move.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new physics_pb.Velocity;
      reader.readMessage(value,physics_pb.Velocity.deserializeBinaryFromReader);
      msg.setVelocity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lugo.Move.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lugo.Move.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lugo.Move} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lugo.Move.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVelocity();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      physics_pb.Velocity.serializeBinaryToWriter
    );
  }
};


/**
 * optional Velocity velocity = 1;
 * @return {?proto.lugo.Velocity}
 */
proto.lugo.Move.prototype.getVelocity = function() {
  return /** @type{?proto.lugo.Velocity} */ (
    jspb.Message.getWrapperField(this, physics_pb.Velocity, 1));
};


/**
 * @param {?proto.lugo.Velocity|undefined} value
 * @return {!proto.lugo.Move} returns this
*/
proto.lugo.Move.prototype.setVelocity = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lugo.Move} returns this
 */
proto.lugo.Move.prototype.clearVelocity = function() {
  return this.setVelocity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lugo.Move.prototype.hasVelocity = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lugo.Catch.prototype.toObject = function(opt_includeInstance) {
  return proto.lugo.Catch.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lugo.Catch} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lugo.Catch.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lugo.Catch}
 */
proto.lugo.Catch.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lugo.Catch;
  return proto.lugo.Catch.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lugo.Catch} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lugo.Catch}
 */
proto.lugo.Catch.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lugo.Catch.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lugo.Catch.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lugo.Catch} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lugo.Catch.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lugo.Kick.prototype.toObject = function(opt_includeInstance) {
  return proto.lugo.Kick.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lugo.Kick} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lugo.Kick.toObject = function(includeInstance, msg) {
  var f, obj = {
    velocity: (f = msg.getVelocity()) && physics_pb.Velocity.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lugo.Kick}
 */
proto.lugo.Kick.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lugo.Kick;
  return proto.lugo.Kick.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lugo.Kick} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lugo.Kick}
 */
proto.lugo.Kick.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new physics_pb.Velocity;
      reader.readMessage(value,physics_pb.Velocity.deserializeBinaryFromReader);
      msg.setVelocity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lugo.Kick.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lugo.Kick.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lugo.Kick} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lugo.Kick.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVelocity();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      physics_pb.Velocity.serializeBinaryToWriter
    );
  }
};


/**
 * optional Velocity velocity = 1;
 * @return {?proto.lugo.Velocity}
 */
proto.lugo.Kick.prototype.getVelocity = function() {
  return /** @type{?proto.lugo.Velocity} */ (
    jspb.Message.getWrapperField(this, physics_pb.Velocity, 1));
};


/**
 * @param {?proto.lugo.Velocity|undefined} value
 * @return {!proto.lugo.Kick} returns this
*/
proto.lugo.Kick.prototype.setVelocity = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lugo.Kick} returns this
 */
proto.lugo.Kick.prototype.clearVelocity = function() {
  return this.setVelocity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lugo.Kick.prototype.hasVelocity = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lugo.Jump.prototype.toObject = function(opt_includeInstance) {
  return proto.lugo.Jump.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lugo.Jump} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lugo.Jump.toObject = function(includeInstance, msg) {
  var f, obj = {
    velocity: (f = msg.getVelocity()) && physics_pb.Velocity.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lugo.Jump}
 */
proto.lugo.Jump.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lugo.Jump;
  return proto.lugo.Jump.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lugo.Jump} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lugo.Jump}
 */
proto.lugo.Jump.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new physics_pb.Velocity;
      reader.readMessage(value,physics_pb.Velocity.deserializeBinaryFromReader);
      msg.setVelocity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lugo.Jump.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lugo.Jump.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lugo.Jump} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lugo.Jump.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVelocity();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      physics_pb.Velocity.serializeBinaryToWriter
    );
  }
};


/**
 * optional Velocity velocity = 1;
 * @return {?proto.lugo.Velocity}
 */
proto.lugo.Jump.prototype.getVelocity = function() {
  return /** @type{?proto.lugo.Velocity} */ (
    jspb.Message.getWrapperField(this, physics_pb.Velocity, 1));
};


/**
 * @param {?proto.lugo.Velocity|undefined} value
 * @return {!proto.lugo.Jump} returns this
*/
proto.lugo.Jump.prototype.setVelocity = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lugo.Jump} returns this
 */
proto.lugo.Jump.prototype.clearVelocity = function() {
  return this.setVelocity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lugo.Jump.prototype.hasVelocity = function() {
  return jspb.Message.getField(this, 1) != null;
};


goog.object.extend(exports, proto.lugo);
