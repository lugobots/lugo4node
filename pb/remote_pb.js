// source: remote.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var physics_pb = require('./physics_pb.js');
goog.object.extend(proto, physics_pb);
var server_pb = require('./server_pb.js');
goog.object.extend(proto, server_pb);
goog.exportSymbol('proto.lugo.BallProperties', null, global);
goog.exportSymbol('proto.lugo.CommandResponse', null, global);
goog.exportSymbol('proto.lugo.CommandResponse.StatusCode', null, global);
goog.exportSymbol('proto.lugo.GameProperties', null, global);
goog.exportSymbol('proto.lugo.NextOrderRequest', null, global);
goog.exportSymbol('proto.lugo.NextTurnRequest', null, global);
goog.exportSymbol('proto.lugo.PauseResumeRequest', null, global);
goog.exportSymbol('proto.lugo.PlayerProperties', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lugo.PauseResumeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lugo.PauseResumeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lugo.PauseResumeRequest.displayName = 'proto.lugo.PauseResumeRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lugo.NextTurnRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lugo.NextTurnRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lugo.NextTurnRequest.displayName = 'proto.lugo.NextTurnRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lugo.NextOrderRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lugo.NextOrderRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lugo.NextOrderRequest.displayName = 'proto.lugo.NextOrderRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lugo.BallProperties = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lugo.BallProperties, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lugo.BallProperties.displayName = 'proto.lugo.BallProperties';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lugo.PlayerProperties = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lugo.PlayerProperties, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lugo.PlayerProperties.displayName = 'proto.lugo.PlayerProperties';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lugo.GameProperties = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lugo.GameProperties, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lugo.GameProperties.displayName = 'proto.lugo.GameProperties';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lugo.CommandResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lugo.CommandResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lugo.CommandResponse.displayName = 'proto.lugo.CommandResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lugo.PauseResumeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.lugo.PauseResumeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lugo.PauseResumeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lugo.PauseResumeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lugo.PauseResumeRequest}
 */
proto.lugo.PauseResumeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lugo.PauseResumeRequest;
  return proto.lugo.PauseResumeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lugo.PauseResumeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lugo.PauseResumeRequest}
 */
proto.lugo.PauseResumeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lugo.PauseResumeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lugo.PauseResumeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lugo.PauseResumeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lugo.PauseResumeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lugo.NextTurnRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.lugo.NextTurnRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lugo.NextTurnRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lugo.NextTurnRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lugo.NextTurnRequest}
 */
proto.lugo.NextTurnRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lugo.NextTurnRequest;
  return proto.lugo.NextTurnRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lugo.NextTurnRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lugo.NextTurnRequest}
 */
proto.lugo.NextTurnRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lugo.NextTurnRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lugo.NextTurnRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lugo.NextTurnRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lugo.NextTurnRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lugo.NextOrderRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.lugo.NextOrderRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lugo.NextOrderRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lugo.NextOrderRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lugo.NextOrderRequest}
 */
proto.lugo.NextOrderRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lugo.NextOrderRequest;
  return proto.lugo.NextOrderRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lugo.NextOrderRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lugo.NextOrderRequest}
 */
proto.lugo.NextOrderRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lugo.NextOrderRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lugo.NextOrderRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lugo.NextOrderRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lugo.NextOrderRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lugo.BallProperties.prototype.toObject = function(opt_includeInstance) {
  return proto.lugo.BallProperties.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lugo.BallProperties} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lugo.BallProperties.toObject = function(includeInstance, msg) {
  var f, obj = {
    position: (f = msg.getPosition()) && physics_pb.Point.toObject(includeInstance, f),
    velocity: (f = msg.getVelocity()) && physics_pb.Velocity.toObject(includeInstance, f),
    holder: (f = msg.getHolder()) && server_pb.Player.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lugo.BallProperties}
 */
proto.lugo.BallProperties.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lugo.BallProperties;
  return proto.lugo.BallProperties.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lugo.BallProperties} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lugo.BallProperties}
 */
proto.lugo.BallProperties.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new physics_pb.Point;
      reader.readMessage(value,physics_pb.Point.deserializeBinaryFromReader);
      msg.setPosition(value);
      break;
    case 2:
      var value = new physics_pb.Velocity;
      reader.readMessage(value,physics_pb.Velocity.deserializeBinaryFromReader);
      msg.setVelocity(value);
      break;
    case 3:
      var value = new server_pb.Player;
      reader.readMessage(value,server_pb.Player.deserializeBinaryFromReader);
      msg.setHolder(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lugo.BallProperties.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lugo.BallProperties.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lugo.BallProperties} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lugo.BallProperties.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPosition();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      physics_pb.Point.serializeBinaryToWriter
    );
  }
  f = message.getVelocity();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      physics_pb.Velocity.serializeBinaryToWriter
    );
  }
  f = message.getHolder();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      server_pb.Player.serializeBinaryToWriter
    );
  }
};


/**
 * optional Point position = 1;
 * @return {?proto.lugo.Point}
 */
proto.lugo.BallProperties.prototype.getPosition = function() {
  return /** @type{?proto.lugo.Point} */ (
    jspb.Message.getWrapperField(this, physics_pb.Point, 1));
};


/**
 * @param {?proto.lugo.Point|undefined} value
 * @return {!proto.lugo.BallProperties} returns this
*/
proto.lugo.BallProperties.prototype.setPosition = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lugo.BallProperties} returns this
 */
proto.lugo.BallProperties.prototype.clearPosition = function() {
  return this.setPosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lugo.BallProperties.prototype.hasPosition = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Velocity velocity = 2;
 * @return {?proto.lugo.Velocity}
 */
proto.lugo.BallProperties.prototype.getVelocity = function() {
  return /** @type{?proto.lugo.Velocity} */ (
    jspb.Message.getWrapperField(this, physics_pb.Velocity, 2));
};


/**
 * @param {?proto.lugo.Velocity|undefined} value
 * @return {!proto.lugo.BallProperties} returns this
*/
proto.lugo.BallProperties.prototype.setVelocity = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lugo.BallProperties} returns this
 */
proto.lugo.BallProperties.prototype.clearVelocity = function() {
  return this.setVelocity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lugo.BallProperties.prototype.hasVelocity = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Player holder = 3;
 * @return {?proto.lugo.Player}
 */
proto.lugo.BallProperties.prototype.getHolder = function() {
  return /** @type{?proto.lugo.Player} */ (
    jspb.Message.getWrapperField(this, server_pb.Player, 3));
};


/**
 * @param {?proto.lugo.Player|undefined} value
 * @return {!proto.lugo.BallProperties} returns this
*/
proto.lugo.BallProperties.prototype.setHolder = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lugo.BallProperties} returns this
 */
proto.lugo.BallProperties.prototype.clearHolder = function() {
  return this.setHolder(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lugo.BallProperties.prototype.hasHolder = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lugo.PlayerProperties.prototype.toObject = function(opt_includeInstance) {
  return proto.lugo.PlayerProperties.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lugo.PlayerProperties} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lugo.PlayerProperties.toObject = function(includeInstance, msg) {
  var f, obj = {
    side: jspb.Message.getFieldWithDefault(msg, 1, 0),
    number: jspb.Message.getFieldWithDefault(msg, 2, 0),
    position: (f = msg.getPosition()) && physics_pb.Point.toObject(includeInstance, f),
    velocity: (f = msg.getVelocity()) && physics_pb.Velocity.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lugo.PlayerProperties}
 */
proto.lugo.PlayerProperties.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lugo.PlayerProperties;
  return proto.lugo.PlayerProperties.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lugo.PlayerProperties} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lugo.PlayerProperties}
 */
proto.lugo.PlayerProperties.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.lugo.Team.Side} */ (reader.readEnum());
      msg.setSide(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNumber(value);
      break;
    case 3:
      var value = new physics_pb.Point;
      reader.readMessage(value,physics_pb.Point.deserializeBinaryFromReader);
      msg.setPosition(value);
      break;
    case 4:
      var value = new physics_pb.Velocity;
      reader.readMessage(value,physics_pb.Velocity.deserializeBinaryFromReader);
      msg.setVelocity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lugo.PlayerProperties.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lugo.PlayerProperties.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lugo.PlayerProperties} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lugo.PlayerProperties.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSide();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getNumber();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getPosition();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      physics_pb.Point.serializeBinaryToWriter
    );
  }
  f = message.getVelocity();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      physics_pb.Velocity.serializeBinaryToWriter
    );
  }
};


/**
 * optional Team.Side side = 1;
 * @return {!proto.lugo.Team.Side}
 */
proto.lugo.PlayerProperties.prototype.getSide = function() {
  return /** @type {!proto.lugo.Team.Side} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.lugo.Team.Side} value
 * @return {!proto.lugo.PlayerProperties} returns this
 */
proto.lugo.PlayerProperties.prototype.setSide = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional uint32 number = 2;
 * @return {number}
 */
proto.lugo.PlayerProperties.prototype.getNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.lugo.PlayerProperties} returns this
 */
proto.lugo.PlayerProperties.prototype.setNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional Point position = 3;
 * @return {?proto.lugo.Point}
 */
proto.lugo.PlayerProperties.prototype.getPosition = function() {
  return /** @type{?proto.lugo.Point} */ (
    jspb.Message.getWrapperField(this, physics_pb.Point, 3));
};


/**
 * @param {?proto.lugo.Point|undefined} value
 * @return {!proto.lugo.PlayerProperties} returns this
*/
proto.lugo.PlayerProperties.prototype.setPosition = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lugo.PlayerProperties} returns this
 */
proto.lugo.PlayerProperties.prototype.clearPosition = function() {
  return this.setPosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lugo.PlayerProperties.prototype.hasPosition = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Velocity velocity = 4;
 * @return {?proto.lugo.Velocity}
 */
proto.lugo.PlayerProperties.prototype.getVelocity = function() {
  return /** @type{?proto.lugo.Velocity} */ (
    jspb.Message.getWrapperField(this, physics_pb.Velocity, 4));
};


/**
 * @param {?proto.lugo.Velocity|undefined} value
 * @return {!proto.lugo.PlayerProperties} returns this
*/
proto.lugo.PlayerProperties.prototype.setVelocity = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lugo.PlayerProperties} returns this
 */
proto.lugo.PlayerProperties.prototype.clearVelocity = function() {
  return this.setVelocity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lugo.PlayerProperties.prototype.hasVelocity = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lugo.GameProperties.prototype.toObject = function(opt_includeInstance) {
  return proto.lugo.GameProperties.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lugo.GameProperties} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lugo.GameProperties.toObject = function(includeInstance, msg) {
  var f, obj = {
    turn: jspb.Message.getFieldWithDefault(msg, 1, 0),
    homeScore: jspb.Message.getFieldWithDefault(msg, 2, 0),
    awayScore: jspb.Message.getFieldWithDefault(msg, 3, 0),
    frameInterval: jspb.Message.getFieldWithDefault(msg, 4, 0),
    shotClock: (f = msg.getShotClock()) && server_pb.ShotClock.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lugo.GameProperties}
 */
proto.lugo.GameProperties.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lugo.GameProperties;
  return proto.lugo.GameProperties.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lugo.GameProperties} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lugo.GameProperties}
 */
proto.lugo.GameProperties.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTurn(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHomeScore(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAwayScore(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFrameInterval(value);
      break;
    case 5:
      var value = new server_pb.ShotClock;
      reader.readMessage(value,server_pb.ShotClock.deserializeBinaryFromReader);
      msg.setShotClock(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lugo.GameProperties.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lugo.GameProperties.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lugo.GameProperties} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lugo.GameProperties.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTurn();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getHomeScore();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getAwayScore();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getFrameInterval();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getShotClock();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      server_pb.ShotClock.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 turn = 1;
 * @return {number}
 */
proto.lugo.GameProperties.prototype.getTurn = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.lugo.GameProperties} returns this
 */
proto.lugo.GameProperties.prototype.setTurn = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 home_score = 2;
 * @return {number}
 */
proto.lugo.GameProperties.prototype.getHomeScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.lugo.GameProperties} returns this
 */
proto.lugo.GameProperties.prototype.setHomeScore = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 away_score = 3;
 * @return {number}
 */
proto.lugo.GameProperties.prototype.getAwayScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.lugo.GameProperties} returns this
 */
proto.lugo.GameProperties.prototype.setAwayScore = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 frame_interval = 4;
 * @return {number}
 */
proto.lugo.GameProperties.prototype.getFrameInterval = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.lugo.GameProperties} returns this
 */
proto.lugo.GameProperties.prototype.setFrameInterval = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional ShotClock shot_clock = 5;
 * @return {?proto.lugo.ShotClock}
 */
proto.lugo.GameProperties.prototype.getShotClock = function() {
  return /** @type{?proto.lugo.ShotClock} */ (
    jspb.Message.getWrapperField(this, server_pb.ShotClock, 5));
};


/**
 * @param {?proto.lugo.ShotClock|undefined} value
 * @return {!proto.lugo.GameProperties} returns this
*/
proto.lugo.GameProperties.prototype.setShotClock = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lugo.GameProperties} returns this
 */
proto.lugo.GameProperties.prototype.clearShotClock = function() {
  return this.setShotClock(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lugo.GameProperties.prototype.hasShotClock = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lugo.CommandResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.lugo.CommandResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lugo.CommandResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lugo.CommandResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    gameSnapshot: (f = msg.getGameSnapshot()) && server_pb.GameSnapshot.toObject(includeInstance, f),
    details: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lugo.CommandResponse}
 */
proto.lugo.CommandResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lugo.CommandResponse;
  return proto.lugo.CommandResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lugo.CommandResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lugo.CommandResponse}
 */
proto.lugo.CommandResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.lugo.CommandResponse.StatusCode} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 2:
      var value = new server_pb.GameSnapshot;
      reader.readMessage(value,server_pb.GameSnapshot.deserializeBinaryFromReader);
      msg.setGameSnapshot(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDetails(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lugo.CommandResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lugo.CommandResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lugo.CommandResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lugo.CommandResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getGameSnapshot();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      server_pb.GameSnapshot.serializeBinaryToWriter
    );
  }
  f = message.getDetails();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.lugo.CommandResponse.StatusCode = {
  SUCCESS: 0,
  INVALID_VALUE: 1,
  DEADLINE_EXCEEDED: 2,
  OTHER: 99
};

/**
 * optional StatusCode code = 1;
 * @return {!proto.lugo.CommandResponse.StatusCode}
 */
proto.lugo.CommandResponse.prototype.getCode = function() {
  return /** @type {!proto.lugo.CommandResponse.StatusCode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.lugo.CommandResponse.StatusCode} value
 * @return {!proto.lugo.CommandResponse} returns this
 */
proto.lugo.CommandResponse.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional GameSnapshot game_snapshot = 2;
 * @return {?proto.lugo.GameSnapshot}
 */
proto.lugo.CommandResponse.prototype.getGameSnapshot = function() {
  return /** @type{?proto.lugo.GameSnapshot} */ (
    jspb.Message.getWrapperField(this, server_pb.GameSnapshot, 2));
};


/**
 * @param {?proto.lugo.GameSnapshot|undefined} value
 * @return {!proto.lugo.CommandResponse} returns this
*/
proto.lugo.CommandResponse.prototype.setGameSnapshot = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lugo.CommandResponse} returns this
 */
proto.lugo.CommandResponse.prototype.clearGameSnapshot = function() {
  return this.setGameSnapshot(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lugo.CommandResponse.prototype.hasGameSnapshot = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string details = 3;
 * @return {string}
 */
proto.lugo.CommandResponse.prototype.getDetails = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.lugo.CommandResponse} returns this
 */
proto.lugo.CommandResponse.prototype.setDetails = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


goog.object.extend(exports, proto.lugo);
