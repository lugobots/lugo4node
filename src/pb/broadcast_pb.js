// source: broadcast.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var server_pb = require('./server_pb.js');
goog.object.extend(proto, server_pb);
goog.exportSymbol('proto.lugo.EventDebugBreakpoint', null, global);
goog.exportSymbol('proto.lugo.EventDebugBreakpoint.Breakpoint', null, global);
goog.exportSymbol('proto.lugo.EventDebugReleased', null, global);
goog.exportSymbol('proto.lugo.EventGameOver', null, global);
goog.exportSymbol('proto.lugo.EventGoal', null, global);
goog.exportSymbol('proto.lugo.EventLostPlayer', null, global);
goog.exportSymbol('proto.lugo.EventNewPlayer', null, global);
goog.exportSymbol('proto.lugo.EventStateChange', null, global);
goog.exportSymbol('proto.lugo.GameEvent', null, global);
goog.exportSymbol('proto.lugo.GameEvent.EventCase', null, global);
goog.exportSymbol('proto.lugo.GameSetup', null, global);
goog.exportSymbol('proto.lugo.GameSetup.ListeningMode', null, global);
goog.exportSymbol('proto.lugo.GameSetup.StartingMode', null, global);
goog.exportSymbol('proto.lugo.StartRequest', null, global);
goog.exportSymbol('proto.lugo.TeamColor', null, global);
goog.exportSymbol('proto.lugo.TeamColors', null, global);
goog.exportSymbol('proto.lugo.TeamSettings', null, global);
goog.exportSymbol('proto.lugo.WatcherRequest', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lugo.WatcherRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lugo.WatcherRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lugo.WatcherRequest.displayName = 'proto.lugo.WatcherRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lugo.StartRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lugo.StartRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lugo.StartRequest.displayName = 'proto.lugo.StartRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lugo.GameEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.lugo.GameEvent.oneofGroups_);
};
goog.inherits(proto.lugo.GameEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lugo.GameEvent.displayName = 'proto.lugo.GameEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lugo.GameSetup = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lugo.GameSetup, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lugo.GameSetup.displayName = 'proto.lugo.GameSetup';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lugo.TeamSettings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lugo.TeamSettings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lugo.TeamSettings.displayName = 'proto.lugo.TeamSettings';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lugo.TeamColors = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lugo.TeamColors, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lugo.TeamColors.displayName = 'proto.lugo.TeamColors';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lugo.TeamColor = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lugo.TeamColor, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lugo.TeamColor.displayName = 'proto.lugo.TeamColor';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lugo.EventNewPlayer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lugo.EventNewPlayer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lugo.EventNewPlayer.displayName = 'proto.lugo.EventNewPlayer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lugo.EventLostPlayer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lugo.EventLostPlayer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lugo.EventLostPlayer.displayName = 'proto.lugo.EventLostPlayer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lugo.EventStateChange = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lugo.EventStateChange, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lugo.EventStateChange.displayName = 'proto.lugo.EventStateChange';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lugo.EventGoal = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lugo.EventGoal, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lugo.EventGoal.displayName = 'proto.lugo.EventGoal';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lugo.EventGameOver = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lugo.EventGameOver, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lugo.EventGameOver.displayName = 'proto.lugo.EventGameOver';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lugo.EventDebugBreakpoint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lugo.EventDebugBreakpoint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lugo.EventDebugBreakpoint.displayName = 'proto.lugo.EventDebugBreakpoint';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lugo.EventDebugReleased = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lugo.EventDebugReleased, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lugo.EventDebugReleased.displayName = 'proto.lugo.EventDebugReleased';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lugo.WatcherRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.lugo.WatcherRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lugo.WatcherRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lugo.WatcherRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    uuid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lugo.WatcherRequest}
 */
proto.lugo.WatcherRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lugo.WatcherRequest;
  return proto.lugo.WatcherRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lugo.WatcherRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lugo.WatcherRequest}
 */
proto.lugo.WatcherRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lugo.WatcherRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lugo.WatcherRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lugo.WatcherRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lugo.WatcherRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string uuid = 1;
 * @return {string}
 */
proto.lugo.WatcherRequest.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.lugo.WatcherRequest} returns this
 */
proto.lugo.WatcherRequest.prototype.setUuid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lugo.StartRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.lugo.StartRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lugo.StartRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lugo.StartRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    watcherUuid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lugo.StartRequest}
 */
proto.lugo.StartRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lugo.StartRequest;
  return proto.lugo.StartRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lugo.StartRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lugo.StartRequest}
 */
proto.lugo.StartRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setWatcherUuid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lugo.StartRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lugo.StartRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lugo.StartRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lugo.StartRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWatcherUuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string watcher_uuid = 1;
 * @return {string}
 */
proto.lugo.StartRequest.prototype.getWatcherUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.lugo.StartRequest} returns this
 */
proto.lugo.StartRequest.prototype.setWatcherUuid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.lugo.GameEvent.oneofGroups_ = [[2,3,4,5,6,7,8]];

/**
 * @enum {number}
 */
proto.lugo.GameEvent.EventCase = {
  EVENT_NOT_SET: 0,
  NEW_PLAYER: 2,
  LOST_PLAYER: 3,
  STATE_CHANGE: 4,
  GOAL: 5,
  GAME_OVER: 6,
  BREAKPOINT: 7,
  DEBUG_RELEASED: 8
};

/**
 * @return {proto.lugo.GameEvent.EventCase}
 */
proto.lugo.GameEvent.prototype.getEventCase = function() {
  return /** @type {proto.lugo.GameEvent.EventCase} */(jspb.Message.computeOneofCase(this, proto.lugo.GameEvent.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lugo.GameEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.lugo.GameEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lugo.GameEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lugo.GameEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    gameSnapshot: (f = msg.getGameSnapshot()) && server_pb.GameSnapshot.toObject(includeInstance, f),
    newPlayer: (f = msg.getNewPlayer()) && proto.lugo.EventNewPlayer.toObject(includeInstance, f),
    lostPlayer: (f = msg.getLostPlayer()) && proto.lugo.EventLostPlayer.toObject(includeInstance, f),
    stateChange: (f = msg.getStateChange()) && proto.lugo.EventStateChange.toObject(includeInstance, f),
    goal: (f = msg.getGoal()) && proto.lugo.EventGoal.toObject(includeInstance, f),
    gameOver: (f = msg.getGameOver()) && proto.lugo.EventGameOver.toObject(includeInstance, f),
    breakpoint: (f = msg.getBreakpoint()) && proto.lugo.EventDebugBreakpoint.toObject(includeInstance, f),
    debugReleased: (f = msg.getDebugReleased()) && proto.lugo.EventDebugReleased.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lugo.GameEvent}
 */
proto.lugo.GameEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lugo.GameEvent;
  return proto.lugo.GameEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lugo.GameEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lugo.GameEvent}
 */
proto.lugo.GameEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new server_pb.GameSnapshot;
      reader.readMessage(value,server_pb.GameSnapshot.deserializeBinaryFromReader);
      msg.setGameSnapshot(value);
      break;
    case 2:
      var value = new proto.lugo.EventNewPlayer;
      reader.readMessage(value,proto.lugo.EventNewPlayer.deserializeBinaryFromReader);
      msg.setNewPlayer(value);
      break;
    case 3:
      var value = new proto.lugo.EventLostPlayer;
      reader.readMessage(value,proto.lugo.EventLostPlayer.deserializeBinaryFromReader);
      msg.setLostPlayer(value);
      break;
    case 4:
      var value = new proto.lugo.EventStateChange;
      reader.readMessage(value,proto.lugo.EventStateChange.deserializeBinaryFromReader);
      msg.setStateChange(value);
      break;
    case 5:
      var value = new proto.lugo.EventGoal;
      reader.readMessage(value,proto.lugo.EventGoal.deserializeBinaryFromReader);
      msg.setGoal(value);
      break;
    case 6:
      var value = new proto.lugo.EventGameOver;
      reader.readMessage(value,proto.lugo.EventGameOver.deserializeBinaryFromReader);
      msg.setGameOver(value);
      break;
    case 7:
      var value = new proto.lugo.EventDebugBreakpoint;
      reader.readMessage(value,proto.lugo.EventDebugBreakpoint.deserializeBinaryFromReader);
      msg.setBreakpoint(value);
      break;
    case 8:
      var value = new proto.lugo.EventDebugReleased;
      reader.readMessage(value,proto.lugo.EventDebugReleased.deserializeBinaryFromReader);
      msg.setDebugReleased(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lugo.GameEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lugo.GameEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lugo.GameEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lugo.GameEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGameSnapshot();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      server_pb.GameSnapshot.serializeBinaryToWriter
    );
  }
  f = message.getNewPlayer();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.lugo.EventNewPlayer.serializeBinaryToWriter
    );
  }
  f = message.getLostPlayer();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.lugo.EventLostPlayer.serializeBinaryToWriter
    );
  }
  f = message.getStateChange();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.lugo.EventStateChange.serializeBinaryToWriter
    );
  }
  f = message.getGoal();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.lugo.EventGoal.serializeBinaryToWriter
    );
  }
  f = message.getGameOver();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.lugo.EventGameOver.serializeBinaryToWriter
    );
  }
  f = message.getBreakpoint();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.lugo.EventDebugBreakpoint.serializeBinaryToWriter
    );
  }
  f = message.getDebugReleased();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.lugo.EventDebugReleased.serializeBinaryToWriter
    );
  }
};


/**
 * optional GameSnapshot game_snapshot = 1;
 * @return {?proto.lugo.GameSnapshot}
 */
proto.lugo.GameEvent.prototype.getGameSnapshot = function() {
  return /** @type{?proto.lugo.GameSnapshot} */ (
    jspb.Message.getWrapperField(this, server_pb.GameSnapshot, 1));
};


/**
 * @param {?proto.lugo.GameSnapshot|undefined} value
 * @return {!proto.lugo.GameEvent} returns this
*/
proto.lugo.GameEvent.prototype.setGameSnapshot = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lugo.GameEvent} returns this
 */
proto.lugo.GameEvent.prototype.clearGameSnapshot = function() {
  return this.setGameSnapshot(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lugo.GameEvent.prototype.hasGameSnapshot = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional EventNewPlayer new_player = 2;
 * @return {?proto.lugo.EventNewPlayer}
 */
proto.lugo.GameEvent.prototype.getNewPlayer = function() {
  return /** @type{?proto.lugo.EventNewPlayer} */ (
    jspb.Message.getWrapperField(this, proto.lugo.EventNewPlayer, 2));
};


/**
 * @param {?proto.lugo.EventNewPlayer|undefined} value
 * @return {!proto.lugo.GameEvent} returns this
*/
proto.lugo.GameEvent.prototype.setNewPlayer = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.lugo.GameEvent.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lugo.GameEvent} returns this
 */
proto.lugo.GameEvent.prototype.clearNewPlayer = function() {
  return this.setNewPlayer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lugo.GameEvent.prototype.hasNewPlayer = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional EventLostPlayer lost_player = 3;
 * @return {?proto.lugo.EventLostPlayer}
 */
proto.lugo.GameEvent.prototype.getLostPlayer = function() {
  return /** @type{?proto.lugo.EventLostPlayer} */ (
    jspb.Message.getWrapperField(this, proto.lugo.EventLostPlayer, 3));
};


/**
 * @param {?proto.lugo.EventLostPlayer|undefined} value
 * @return {!proto.lugo.GameEvent} returns this
*/
proto.lugo.GameEvent.prototype.setLostPlayer = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.lugo.GameEvent.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lugo.GameEvent} returns this
 */
proto.lugo.GameEvent.prototype.clearLostPlayer = function() {
  return this.setLostPlayer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lugo.GameEvent.prototype.hasLostPlayer = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional EventStateChange state_change = 4;
 * @return {?proto.lugo.EventStateChange}
 */
proto.lugo.GameEvent.prototype.getStateChange = function() {
  return /** @type{?proto.lugo.EventStateChange} */ (
    jspb.Message.getWrapperField(this, proto.lugo.EventStateChange, 4));
};


/**
 * @param {?proto.lugo.EventStateChange|undefined} value
 * @return {!proto.lugo.GameEvent} returns this
*/
proto.lugo.GameEvent.prototype.setStateChange = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.lugo.GameEvent.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lugo.GameEvent} returns this
 */
proto.lugo.GameEvent.prototype.clearStateChange = function() {
  return this.setStateChange(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lugo.GameEvent.prototype.hasStateChange = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional EventGoal goal = 5;
 * @return {?proto.lugo.EventGoal}
 */
proto.lugo.GameEvent.prototype.getGoal = function() {
  return /** @type{?proto.lugo.EventGoal} */ (
    jspb.Message.getWrapperField(this, proto.lugo.EventGoal, 5));
};


/**
 * @param {?proto.lugo.EventGoal|undefined} value
 * @return {!proto.lugo.GameEvent} returns this
*/
proto.lugo.GameEvent.prototype.setGoal = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.lugo.GameEvent.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lugo.GameEvent} returns this
 */
proto.lugo.GameEvent.prototype.clearGoal = function() {
  return this.setGoal(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lugo.GameEvent.prototype.hasGoal = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional EventGameOver game_over = 6;
 * @return {?proto.lugo.EventGameOver}
 */
proto.lugo.GameEvent.prototype.getGameOver = function() {
  return /** @type{?proto.lugo.EventGameOver} */ (
    jspb.Message.getWrapperField(this, proto.lugo.EventGameOver, 6));
};


/**
 * @param {?proto.lugo.EventGameOver|undefined} value
 * @return {!proto.lugo.GameEvent} returns this
*/
proto.lugo.GameEvent.prototype.setGameOver = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.lugo.GameEvent.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lugo.GameEvent} returns this
 */
proto.lugo.GameEvent.prototype.clearGameOver = function() {
  return this.setGameOver(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lugo.GameEvent.prototype.hasGameOver = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional EventDebugBreakpoint breakpoint = 7;
 * @return {?proto.lugo.EventDebugBreakpoint}
 */
proto.lugo.GameEvent.prototype.getBreakpoint = function() {
  return /** @type{?proto.lugo.EventDebugBreakpoint} */ (
    jspb.Message.getWrapperField(this, proto.lugo.EventDebugBreakpoint, 7));
};


/**
 * @param {?proto.lugo.EventDebugBreakpoint|undefined} value
 * @return {!proto.lugo.GameEvent} returns this
*/
proto.lugo.GameEvent.prototype.setBreakpoint = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.lugo.GameEvent.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lugo.GameEvent} returns this
 */
proto.lugo.GameEvent.prototype.clearBreakpoint = function() {
  return this.setBreakpoint(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lugo.GameEvent.prototype.hasBreakpoint = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional EventDebugReleased debug_released = 8;
 * @return {?proto.lugo.EventDebugReleased}
 */
proto.lugo.GameEvent.prototype.getDebugReleased = function() {
  return /** @type{?proto.lugo.EventDebugReleased} */ (
    jspb.Message.getWrapperField(this, proto.lugo.EventDebugReleased, 8));
};


/**
 * @param {?proto.lugo.EventDebugReleased|undefined} value
 * @return {!proto.lugo.GameEvent} returns this
*/
proto.lugo.GameEvent.prototype.setDebugReleased = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.lugo.GameEvent.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lugo.GameEvent} returns this
 */
proto.lugo.GameEvent.prototype.clearDebugReleased = function() {
  return this.setDebugReleased(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lugo.GameEvent.prototype.hasDebugReleased = function() {
  return jspb.Message.getField(this, 8) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lugo.GameSetup.prototype.toObject = function(opt_includeInstance) {
  return proto.lugo.GameSetup.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lugo.GameSetup} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lugo.GameSetup.toObject = function(includeInstance, msg) {
  var f, obj = {
    protocolVersion: jspb.Message.getFieldWithDefault(msg, 1, ""),
    devMode: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    startMode: jspb.Message.getFieldWithDefault(msg, 3, 0),
    listeningMode: jspb.Message.getFieldWithDefault(msg, 4, 0),
    listeningDuration: jspb.Message.getFieldWithDefault(msg, 5, 0),
    gameDuration: jspb.Message.getFieldWithDefault(msg, 6, 0),
    homeTeam: (f = msg.getHomeTeam()) && proto.lugo.TeamSettings.toObject(includeInstance, f),
    awayTeam: (f = msg.getAwayTeam()) && proto.lugo.TeamSettings.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lugo.GameSetup}
 */
proto.lugo.GameSetup.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lugo.GameSetup;
  return proto.lugo.GameSetup.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lugo.GameSetup} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lugo.GameSetup}
 */
proto.lugo.GameSetup.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setProtocolVersion(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDevMode(value);
      break;
    case 3:
      var value = /** @type {!proto.lugo.GameSetup.StartingMode} */ (reader.readEnum());
      msg.setStartMode(value);
      break;
    case 4:
      var value = /** @type {!proto.lugo.GameSetup.ListeningMode} */ (reader.readEnum());
      msg.setListeningMode(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setListeningDuration(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGameDuration(value);
      break;
    case 8:
      var value = new proto.lugo.TeamSettings;
      reader.readMessage(value,proto.lugo.TeamSettings.deserializeBinaryFromReader);
      msg.setHomeTeam(value);
      break;
    case 9:
      var value = new proto.lugo.TeamSettings;
      reader.readMessage(value,proto.lugo.TeamSettings.deserializeBinaryFromReader);
      msg.setAwayTeam(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lugo.GameSetup.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lugo.GameSetup.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lugo.GameSetup} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lugo.GameSetup.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProtocolVersion();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDevMode();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getStartMode();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getListeningMode();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getListeningDuration();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getGameDuration();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getHomeTeam();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.lugo.TeamSettings.serializeBinaryToWriter
    );
  }
  f = message.getAwayTeam();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.lugo.TeamSettings.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.lugo.GameSetup.StartingMode = {
  NO_WAIT: 0,
  WAIT: 1
};

/**
 * @enum {number}
 */
proto.lugo.GameSetup.ListeningMode = {
  TIMER: 0,
  RUSH: 1,
  REMOTE: 2
};

/**
 * optional string protocol_version = 1;
 * @return {string}
 */
proto.lugo.GameSetup.prototype.getProtocolVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.lugo.GameSetup} returns this
 */
proto.lugo.GameSetup.prototype.setProtocolVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool dev_mode = 2;
 * @return {boolean}
 */
proto.lugo.GameSetup.prototype.getDevMode = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.lugo.GameSetup} returns this
 */
proto.lugo.GameSetup.prototype.setDevMode = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional StartingMode start_mode = 3;
 * @return {!proto.lugo.GameSetup.StartingMode}
 */
proto.lugo.GameSetup.prototype.getStartMode = function() {
  return /** @type {!proto.lugo.GameSetup.StartingMode} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.lugo.GameSetup.StartingMode} value
 * @return {!proto.lugo.GameSetup} returns this
 */
proto.lugo.GameSetup.prototype.setStartMode = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional ListeningMode listening_mode = 4;
 * @return {!proto.lugo.GameSetup.ListeningMode}
 */
proto.lugo.GameSetup.prototype.getListeningMode = function() {
  return /** @type {!proto.lugo.GameSetup.ListeningMode} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.lugo.GameSetup.ListeningMode} value
 * @return {!proto.lugo.GameSetup} returns this
 */
proto.lugo.GameSetup.prototype.setListeningMode = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional uint32 listening_duration = 5;
 * @return {number}
 */
proto.lugo.GameSetup.prototype.getListeningDuration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.lugo.GameSetup} returns this
 */
proto.lugo.GameSetup.prototype.setListeningDuration = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint32 game_duration = 6;
 * @return {number}
 */
proto.lugo.GameSetup.prototype.getGameDuration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.lugo.GameSetup} returns this
 */
proto.lugo.GameSetup.prototype.setGameDuration = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional TeamSettings home_team = 8;
 * @return {?proto.lugo.TeamSettings}
 */
proto.lugo.GameSetup.prototype.getHomeTeam = function() {
  return /** @type{?proto.lugo.TeamSettings} */ (
    jspb.Message.getWrapperField(this, proto.lugo.TeamSettings, 8));
};


/**
 * @param {?proto.lugo.TeamSettings|undefined} value
 * @return {!proto.lugo.GameSetup} returns this
*/
proto.lugo.GameSetup.prototype.setHomeTeam = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lugo.GameSetup} returns this
 */
proto.lugo.GameSetup.prototype.clearHomeTeam = function() {
  return this.setHomeTeam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lugo.GameSetup.prototype.hasHomeTeam = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional TeamSettings away_team = 9;
 * @return {?proto.lugo.TeamSettings}
 */
proto.lugo.GameSetup.prototype.getAwayTeam = function() {
  return /** @type{?proto.lugo.TeamSettings} */ (
    jspb.Message.getWrapperField(this, proto.lugo.TeamSettings, 9));
};


/**
 * @param {?proto.lugo.TeamSettings|undefined} value
 * @return {!proto.lugo.GameSetup} returns this
*/
proto.lugo.GameSetup.prototype.setAwayTeam = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lugo.GameSetup} returns this
 */
proto.lugo.GameSetup.prototype.clearAwayTeam = function() {
  return this.setAwayTeam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lugo.GameSetup.prototype.hasAwayTeam = function() {
  return jspb.Message.getField(this, 9) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lugo.TeamSettings.prototype.toObject = function(opt_includeInstance) {
  return proto.lugo.TeamSettings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lugo.TeamSettings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lugo.TeamSettings.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    avatar: jspb.Message.getFieldWithDefault(msg, 2, ""),
    colors: (f = msg.getColors()) && proto.lugo.TeamColors.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lugo.TeamSettings}
 */
proto.lugo.TeamSettings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lugo.TeamSettings;
  return proto.lugo.TeamSettings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lugo.TeamSettings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lugo.TeamSettings}
 */
proto.lugo.TeamSettings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAvatar(value);
      break;
    case 3:
      var value = new proto.lugo.TeamColors;
      reader.readMessage(value,proto.lugo.TeamColors.deserializeBinaryFromReader);
      msg.setColors(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lugo.TeamSettings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lugo.TeamSettings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lugo.TeamSettings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lugo.TeamSettings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAvatar();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getColors();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.lugo.TeamColors.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.lugo.TeamSettings.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.lugo.TeamSettings} returns this
 */
proto.lugo.TeamSettings.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string avatar = 2;
 * @return {string}
 */
proto.lugo.TeamSettings.prototype.getAvatar = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.lugo.TeamSettings} returns this
 */
proto.lugo.TeamSettings.prototype.setAvatar = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional TeamColors colors = 3;
 * @return {?proto.lugo.TeamColors}
 */
proto.lugo.TeamSettings.prototype.getColors = function() {
  return /** @type{?proto.lugo.TeamColors} */ (
    jspb.Message.getWrapperField(this, proto.lugo.TeamColors, 3));
};


/**
 * @param {?proto.lugo.TeamColors|undefined} value
 * @return {!proto.lugo.TeamSettings} returns this
*/
proto.lugo.TeamSettings.prototype.setColors = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lugo.TeamSettings} returns this
 */
proto.lugo.TeamSettings.prototype.clearColors = function() {
  return this.setColors(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lugo.TeamSettings.prototype.hasColors = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lugo.TeamColors.prototype.toObject = function(opt_includeInstance) {
  return proto.lugo.TeamColors.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lugo.TeamColors} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lugo.TeamColors.toObject = function(includeInstance, msg) {
  var f, obj = {
    primary: (f = msg.getPrimary()) && proto.lugo.TeamColor.toObject(includeInstance, f),
    secondary: (f = msg.getSecondary()) && proto.lugo.TeamColor.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lugo.TeamColors}
 */
proto.lugo.TeamColors.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lugo.TeamColors;
  return proto.lugo.TeamColors.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lugo.TeamColors} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lugo.TeamColors}
 */
proto.lugo.TeamColors.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.lugo.TeamColor;
      reader.readMessage(value,proto.lugo.TeamColor.deserializeBinaryFromReader);
      msg.setPrimary(value);
      break;
    case 2:
      var value = new proto.lugo.TeamColor;
      reader.readMessage(value,proto.lugo.TeamColor.deserializeBinaryFromReader);
      msg.setSecondary(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lugo.TeamColors.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lugo.TeamColors.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lugo.TeamColors} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lugo.TeamColors.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPrimary();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.lugo.TeamColor.serializeBinaryToWriter
    );
  }
  f = message.getSecondary();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.lugo.TeamColor.serializeBinaryToWriter
    );
  }
};


/**
 * optional TeamColor primary = 1;
 * @return {?proto.lugo.TeamColor}
 */
proto.lugo.TeamColors.prototype.getPrimary = function() {
  return /** @type{?proto.lugo.TeamColor} */ (
    jspb.Message.getWrapperField(this, proto.lugo.TeamColor, 1));
};


/**
 * @param {?proto.lugo.TeamColor|undefined} value
 * @return {!proto.lugo.TeamColors} returns this
*/
proto.lugo.TeamColors.prototype.setPrimary = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lugo.TeamColors} returns this
 */
proto.lugo.TeamColors.prototype.clearPrimary = function() {
  return this.setPrimary(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lugo.TeamColors.prototype.hasPrimary = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional TeamColor secondary = 2;
 * @return {?proto.lugo.TeamColor}
 */
proto.lugo.TeamColors.prototype.getSecondary = function() {
  return /** @type{?proto.lugo.TeamColor} */ (
    jspb.Message.getWrapperField(this, proto.lugo.TeamColor, 2));
};


/**
 * @param {?proto.lugo.TeamColor|undefined} value
 * @return {!proto.lugo.TeamColors} returns this
*/
proto.lugo.TeamColors.prototype.setSecondary = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lugo.TeamColors} returns this
 */
proto.lugo.TeamColors.prototype.clearSecondary = function() {
  return this.setSecondary(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lugo.TeamColors.prototype.hasSecondary = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lugo.TeamColor.prototype.toObject = function(opt_includeInstance) {
  return proto.lugo.TeamColor.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lugo.TeamColor} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lugo.TeamColor.toObject = function(includeInstance, msg) {
  var f, obj = {
    red: jspb.Message.getFieldWithDefault(msg, 1, 0),
    green: jspb.Message.getFieldWithDefault(msg, 2, 0),
    blue: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lugo.TeamColor}
 */
proto.lugo.TeamColor.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lugo.TeamColor;
  return proto.lugo.TeamColor.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lugo.TeamColor} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lugo.TeamColor}
 */
proto.lugo.TeamColor.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRed(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGreen(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBlue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lugo.TeamColor.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lugo.TeamColor.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lugo.TeamColor} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lugo.TeamColor.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRed();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getGreen();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getBlue();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * optional uint32 red = 1;
 * @return {number}
 */
proto.lugo.TeamColor.prototype.getRed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.lugo.TeamColor} returns this
 */
proto.lugo.TeamColor.prototype.setRed = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 green = 2;
 * @return {number}
 */
proto.lugo.TeamColor.prototype.getGreen = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.lugo.TeamColor} returns this
 */
proto.lugo.TeamColor.prototype.setGreen = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 blue = 4;
 * @return {number}
 */
proto.lugo.TeamColor.prototype.getBlue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.lugo.TeamColor} returns this
 */
proto.lugo.TeamColor.prototype.setBlue = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lugo.EventNewPlayer.prototype.toObject = function(opt_includeInstance) {
  return proto.lugo.EventNewPlayer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lugo.EventNewPlayer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lugo.EventNewPlayer.toObject = function(includeInstance, msg) {
  var f, obj = {
    player: (f = msg.getPlayer()) && server_pb.Player.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lugo.EventNewPlayer}
 */
proto.lugo.EventNewPlayer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lugo.EventNewPlayer;
  return proto.lugo.EventNewPlayer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lugo.EventNewPlayer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lugo.EventNewPlayer}
 */
proto.lugo.EventNewPlayer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new server_pb.Player;
      reader.readMessage(value,server_pb.Player.deserializeBinaryFromReader);
      msg.setPlayer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lugo.EventNewPlayer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lugo.EventNewPlayer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lugo.EventNewPlayer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lugo.EventNewPlayer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      server_pb.Player.serializeBinaryToWriter
    );
  }
};


/**
 * optional Player player = 1;
 * @return {?proto.lugo.Player}
 */
proto.lugo.EventNewPlayer.prototype.getPlayer = function() {
  return /** @type{?proto.lugo.Player} */ (
    jspb.Message.getWrapperField(this, server_pb.Player, 1));
};


/**
 * @param {?proto.lugo.Player|undefined} value
 * @return {!proto.lugo.EventNewPlayer} returns this
*/
proto.lugo.EventNewPlayer.prototype.setPlayer = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lugo.EventNewPlayer} returns this
 */
proto.lugo.EventNewPlayer.prototype.clearPlayer = function() {
  return this.setPlayer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lugo.EventNewPlayer.prototype.hasPlayer = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lugo.EventLostPlayer.prototype.toObject = function(opt_includeInstance) {
  return proto.lugo.EventLostPlayer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lugo.EventLostPlayer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lugo.EventLostPlayer.toObject = function(includeInstance, msg) {
  var f, obj = {
    player: (f = msg.getPlayer()) && server_pb.Player.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lugo.EventLostPlayer}
 */
proto.lugo.EventLostPlayer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lugo.EventLostPlayer;
  return proto.lugo.EventLostPlayer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lugo.EventLostPlayer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lugo.EventLostPlayer}
 */
proto.lugo.EventLostPlayer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new server_pb.Player;
      reader.readMessage(value,server_pb.Player.deserializeBinaryFromReader);
      msg.setPlayer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lugo.EventLostPlayer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lugo.EventLostPlayer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lugo.EventLostPlayer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lugo.EventLostPlayer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      server_pb.Player.serializeBinaryToWriter
    );
  }
};


/**
 * optional Player player = 1;
 * @return {?proto.lugo.Player}
 */
proto.lugo.EventLostPlayer.prototype.getPlayer = function() {
  return /** @type{?proto.lugo.Player} */ (
    jspb.Message.getWrapperField(this, server_pb.Player, 1));
};


/**
 * @param {?proto.lugo.Player|undefined} value
 * @return {!proto.lugo.EventLostPlayer} returns this
*/
proto.lugo.EventLostPlayer.prototype.setPlayer = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lugo.EventLostPlayer} returns this
 */
proto.lugo.EventLostPlayer.prototype.clearPlayer = function() {
  return this.setPlayer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lugo.EventLostPlayer.prototype.hasPlayer = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lugo.EventStateChange.prototype.toObject = function(opt_includeInstance) {
  return proto.lugo.EventStateChange.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lugo.EventStateChange} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lugo.EventStateChange.toObject = function(includeInstance, msg) {
  var f, obj = {
    previousState: jspb.Message.getFieldWithDefault(msg, 1, 0),
    newState: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lugo.EventStateChange}
 */
proto.lugo.EventStateChange.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lugo.EventStateChange;
  return proto.lugo.EventStateChange.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lugo.EventStateChange} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lugo.EventStateChange}
 */
proto.lugo.EventStateChange.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.lugo.GameSnapshot.State} */ (reader.readEnum());
      msg.setPreviousState(value);
      break;
    case 2:
      var value = /** @type {!proto.lugo.GameSnapshot.State} */ (reader.readEnum());
      msg.setNewState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lugo.EventStateChange.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lugo.EventStateChange.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lugo.EventStateChange} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lugo.EventStateChange.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPreviousState();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getNewState();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional GameSnapshot.State previous_state = 1;
 * @return {!proto.lugo.GameSnapshot.State}
 */
proto.lugo.EventStateChange.prototype.getPreviousState = function() {
  return /** @type {!proto.lugo.GameSnapshot.State} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.lugo.GameSnapshot.State} value
 * @return {!proto.lugo.EventStateChange} returns this
 */
proto.lugo.EventStateChange.prototype.setPreviousState = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional GameSnapshot.State new_state = 2;
 * @return {!proto.lugo.GameSnapshot.State}
 */
proto.lugo.EventStateChange.prototype.getNewState = function() {
  return /** @type {!proto.lugo.GameSnapshot.State} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.lugo.GameSnapshot.State} value
 * @return {!proto.lugo.EventStateChange} returns this
 */
proto.lugo.EventStateChange.prototype.setNewState = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lugo.EventGoal.prototype.toObject = function(opt_includeInstance) {
  return proto.lugo.EventGoal.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lugo.EventGoal} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lugo.EventGoal.toObject = function(includeInstance, msg) {
  var f, obj = {
    side: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lugo.EventGoal}
 */
proto.lugo.EventGoal.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lugo.EventGoal;
  return proto.lugo.EventGoal.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lugo.EventGoal} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lugo.EventGoal}
 */
proto.lugo.EventGoal.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.lugo.Team.Side} */ (reader.readEnum());
      msg.setSide(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lugo.EventGoal.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lugo.EventGoal.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lugo.EventGoal} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lugo.EventGoal.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSide();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional Team.Side side = 1;
 * @return {!proto.lugo.Team.Side}
 */
proto.lugo.EventGoal.prototype.getSide = function() {
  return /** @type {!proto.lugo.Team.Side} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.lugo.Team.Side} value
 * @return {!proto.lugo.EventGoal} returns this
 */
proto.lugo.EventGoal.prototype.setSide = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lugo.EventGameOver.prototype.toObject = function(opt_includeInstance) {
  return proto.lugo.EventGameOver.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lugo.EventGameOver} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lugo.EventGameOver.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lugo.EventGameOver}
 */
proto.lugo.EventGameOver.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lugo.EventGameOver;
  return proto.lugo.EventGameOver.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lugo.EventGameOver} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lugo.EventGameOver}
 */
proto.lugo.EventGameOver.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lugo.EventGameOver.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lugo.EventGameOver.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lugo.EventGameOver} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lugo.EventGameOver.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lugo.EventDebugBreakpoint.prototype.toObject = function(opt_includeInstance) {
  return proto.lugo.EventDebugBreakpoint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lugo.EventDebugBreakpoint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lugo.EventDebugBreakpoint.toObject = function(includeInstance, msg) {
  var f, obj = {
    breakpoint: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lugo.EventDebugBreakpoint}
 */
proto.lugo.EventDebugBreakpoint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lugo.EventDebugBreakpoint;
  return proto.lugo.EventDebugBreakpoint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lugo.EventDebugBreakpoint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lugo.EventDebugBreakpoint}
 */
proto.lugo.EventDebugBreakpoint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.lugo.EventDebugBreakpoint.Breakpoint} */ (reader.readEnum());
      msg.setBreakpoint(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lugo.EventDebugBreakpoint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lugo.EventDebugBreakpoint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lugo.EventDebugBreakpoint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lugo.EventDebugBreakpoint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBreakpoint();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.lugo.EventDebugBreakpoint.Breakpoint = {
  ORDERS: 0,
  TURN: 1
};

/**
 * optional Breakpoint breakpoint = 1;
 * @return {!proto.lugo.EventDebugBreakpoint.Breakpoint}
 */
proto.lugo.EventDebugBreakpoint.prototype.getBreakpoint = function() {
  return /** @type {!proto.lugo.EventDebugBreakpoint.Breakpoint} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.lugo.EventDebugBreakpoint.Breakpoint} value
 * @return {!proto.lugo.EventDebugBreakpoint} returns this
 */
proto.lugo.EventDebugBreakpoint.prototype.setBreakpoint = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lugo.EventDebugReleased.prototype.toObject = function(opt_includeInstance) {
  return proto.lugo.EventDebugReleased.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lugo.EventDebugReleased} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lugo.EventDebugReleased.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lugo.EventDebugReleased}
 */
proto.lugo.EventDebugReleased.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lugo.EventDebugReleased;
  return proto.lugo.EventDebugReleased.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lugo.EventDebugReleased} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lugo.EventDebugReleased}
 */
proto.lugo.EventDebugReleased.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lugo.EventDebugReleased.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lugo.EventDebugReleased.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lugo.EventDebugReleased} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lugo.EventDebugReleased.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


goog.object.extend(exports, proto.lugo);
