// source: rl_assistant.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var server_pb = require('./server_pb.js');
goog.object.extend(proto, server_pb);
goog.exportSymbol('proto.lugo.PlayerOrdersOnRLSession', null, global);
goog.exportSymbol('proto.lugo.PlayersOrders', null, global);
goog.exportSymbol('proto.lugo.RLResetConfig', null, global);
goog.exportSymbol('proto.lugo.RLSessionConfig', null, global);
goog.exportSymbol('proto.lugo.TurnOutcome', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lugo.RLSessionConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lugo.RLSessionConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lugo.RLSessionConfig.displayName = 'proto.lugo.RLSessionConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lugo.PlayerOrdersOnRLSession = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.lugo.PlayerOrdersOnRLSession.repeatedFields_, null);
};
goog.inherits(proto.lugo.PlayerOrdersOnRLSession, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lugo.PlayerOrdersOnRLSession.displayName = 'proto.lugo.PlayerOrdersOnRLSession';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lugo.PlayersOrders = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.lugo.PlayersOrders.repeatedFields_, null);
};
goog.inherits(proto.lugo.PlayersOrders, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lugo.PlayersOrders.displayName = 'proto.lugo.PlayersOrders';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lugo.TurnOutcome = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lugo.TurnOutcome, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lugo.TurnOutcome.displayName = 'proto.lugo.TurnOutcome';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lugo.RLResetConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lugo.RLResetConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lugo.RLResetConfig.displayName = 'proto.lugo.RLResetConfig';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lugo.RLSessionConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.lugo.RLSessionConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lugo.RLSessionConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lugo.RLSessionConfig.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lugo.RLSessionConfig}
 */
proto.lugo.RLSessionConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lugo.RLSessionConfig;
  return proto.lugo.RLSessionConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lugo.RLSessionConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lugo.RLSessionConfig}
 */
proto.lugo.RLSessionConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lugo.RLSessionConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lugo.RLSessionConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lugo.RLSessionConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lugo.RLSessionConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.lugo.PlayerOrdersOnRLSession.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lugo.PlayerOrdersOnRLSession.prototype.toObject = function(opt_includeInstance) {
  return proto.lugo.PlayerOrdersOnRLSession.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lugo.PlayerOrdersOnRLSession} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lugo.PlayerOrdersOnRLSession.toObject = function(includeInstance, msg) {
  var f, obj = {
    teamSide: jspb.Message.getFieldWithDefault(msg, 1, 0),
    number: jspb.Message.getFieldWithDefault(msg, 2, 0),
    behaviour: jspb.Message.getFieldWithDefault(msg, 3, ""),
    ordersList: jspb.Message.toObjectList(msg.getOrdersList(),
    server_pb.Order.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lugo.PlayerOrdersOnRLSession}
 */
proto.lugo.PlayerOrdersOnRLSession.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lugo.PlayerOrdersOnRLSession;
  return proto.lugo.PlayerOrdersOnRLSession.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lugo.PlayerOrdersOnRLSession} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lugo.PlayerOrdersOnRLSession}
 */
proto.lugo.PlayerOrdersOnRLSession.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.lugo.Team.Side} */ (reader.readEnum());
      msg.setTeamSide(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNumber(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setBehaviour(value);
      break;
    case 4:
      var value = new server_pb.Order;
      reader.readMessage(value,server_pb.Order.deserializeBinaryFromReader);
      msg.addOrders(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lugo.PlayerOrdersOnRLSession.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lugo.PlayerOrdersOnRLSession.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lugo.PlayerOrdersOnRLSession} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lugo.PlayerOrdersOnRLSession.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTeamSide();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getNumber();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getBehaviour();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getOrdersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      server_pb.Order.serializeBinaryToWriter
    );
  }
};


/**
 * optional Team.Side team_side = 1;
 * @return {!proto.lugo.Team.Side}
 */
proto.lugo.PlayerOrdersOnRLSession.prototype.getTeamSide = function() {
  return /** @type {!proto.lugo.Team.Side} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.lugo.Team.Side} value
 * @return {!proto.lugo.PlayerOrdersOnRLSession} returns this
 */
proto.lugo.PlayerOrdersOnRLSession.prototype.setTeamSide = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional uint32 number = 2;
 * @return {number}
 */
proto.lugo.PlayerOrdersOnRLSession.prototype.getNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.lugo.PlayerOrdersOnRLSession} returns this
 */
proto.lugo.PlayerOrdersOnRLSession.prototype.setNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string behaviour = 3;
 * @return {string}
 */
proto.lugo.PlayerOrdersOnRLSession.prototype.getBehaviour = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.lugo.PlayerOrdersOnRLSession} returns this
 */
proto.lugo.PlayerOrdersOnRLSession.prototype.setBehaviour = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated Order orders = 4;
 * @return {!Array<!proto.lugo.Order>}
 */
proto.lugo.PlayerOrdersOnRLSession.prototype.getOrdersList = function() {
  return /** @type{!Array<!proto.lugo.Order>} */ (
    jspb.Message.getRepeatedWrapperField(this, server_pb.Order, 4));
};


/**
 * @param {!Array<!proto.lugo.Order>} value
 * @return {!proto.lugo.PlayerOrdersOnRLSession} returns this
*/
proto.lugo.PlayerOrdersOnRLSession.prototype.setOrdersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.lugo.Order=} opt_value
 * @param {number=} opt_index
 * @return {!proto.lugo.Order}
 */
proto.lugo.PlayerOrdersOnRLSession.prototype.addOrders = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.lugo.Order, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.lugo.PlayerOrdersOnRLSession} returns this
 */
proto.lugo.PlayerOrdersOnRLSession.prototype.clearOrdersList = function() {
  return this.setOrdersList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.lugo.PlayersOrders.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lugo.PlayersOrders.prototype.toObject = function(opt_includeInstance) {
  return proto.lugo.PlayersOrders.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lugo.PlayersOrders} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lugo.PlayersOrders.toObject = function(includeInstance, msg) {
  var f, obj = {
    defaultBehaviour: jspb.Message.getFieldWithDefault(msg, 1, ""),
    playersOrdersList: jspb.Message.toObjectList(msg.getPlayersOrdersList(),
    proto.lugo.PlayerOrdersOnRLSession.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lugo.PlayersOrders}
 */
proto.lugo.PlayersOrders.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lugo.PlayersOrders;
  return proto.lugo.PlayersOrders.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lugo.PlayersOrders} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lugo.PlayersOrders}
 */
proto.lugo.PlayersOrders.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDefaultBehaviour(value);
      break;
    case 2:
      var value = new proto.lugo.PlayerOrdersOnRLSession;
      reader.readMessage(value,proto.lugo.PlayerOrdersOnRLSession.deserializeBinaryFromReader);
      msg.addPlayersOrders(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lugo.PlayersOrders.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lugo.PlayersOrders.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lugo.PlayersOrders} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lugo.PlayersOrders.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDefaultBehaviour();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPlayersOrdersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.lugo.PlayerOrdersOnRLSession.serializeBinaryToWriter
    );
  }
};


/**
 * optional string default_behaviour = 1;
 * @return {string}
 */
proto.lugo.PlayersOrders.prototype.getDefaultBehaviour = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.lugo.PlayersOrders} returns this
 */
proto.lugo.PlayersOrders.prototype.setDefaultBehaviour = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated PlayerOrdersOnRLSession players_orders = 2;
 * @return {!Array<!proto.lugo.PlayerOrdersOnRLSession>}
 */
proto.lugo.PlayersOrders.prototype.getPlayersOrdersList = function() {
  return /** @type{!Array<!proto.lugo.PlayerOrdersOnRLSession>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.lugo.PlayerOrdersOnRLSession, 2));
};


/**
 * @param {!Array<!proto.lugo.PlayerOrdersOnRLSession>} value
 * @return {!proto.lugo.PlayersOrders} returns this
*/
proto.lugo.PlayersOrders.prototype.setPlayersOrdersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.lugo.PlayerOrdersOnRLSession=} opt_value
 * @param {number=} opt_index
 * @return {!proto.lugo.PlayerOrdersOnRLSession}
 */
proto.lugo.PlayersOrders.prototype.addPlayersOrders = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.lugo.PlayerOrdersOnRLSession, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.lugo.PlayersOrders} returns this
 */
proto.lugo.PlayersOrders.prototype.clearPlayersOrdersList = function() {
  return this.setPlayersOrdersList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lugo.TurnOutcome.prototype.toObject = function(opt_includeInstance) {
  return proto.lugo.TurnOutcome.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lugo.TurnOutcome} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lugo.TurnOutcome.toObject = function(includeInstance, msg) {
  var f, obj = {
    gameSnapshot: (f = msg.getGameSnapshot()) && server_pb.GameSnapshot.toObject(includeInstance, f),
    scoreChanged: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    shotClockExpired: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    goalZoneTimerExpired: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lugo.TurnOutcome}
 */
proto.lugo.TurnOutcome.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lugo.TurnOutcome;
  return proto.lugo.TurnOutcome.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lugo.TurnOutcome} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lugo.TurnOutcome}
 */
proto.lugo.TurnOutcome.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new server_pb.GameSnapshot;
      reader.readMessage(value,server_pb.GameSnapshot.deserializeBinaryFromReader);
      msg.setGameSnapshot(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setScoreChanged(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setShotClockExpired(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setGoalZoneTimerExpired(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lugo.TurnOutcome.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lugo.TurnOutcome.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lugo.TurnOutcome} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lugo.TurnOutcome.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGameSnapshot();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      server_pb.GameSnapshot.serializeBinaryToWriter
    );
  }
  f = message.getScoreChanged();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getShotClockExpired();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getGoalZoneTimerExpired();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional GameSnapshot game_snapshot = 1;
 * @return {?proto.lugo.GameSnapshot}
 */
proto.lugo.TurnOutcome.prototype.getGameSnapshot = function() {
  return /** @type{?proto.lugo.GameSnapshot} */ (
    jspb.Message.getWrapperField(this, server_pb.GameSnapshot, 1));
};


/**
 * @param {?proto.lugo.GameSnapshot|undefined} value
 * @return {!proto.lugo.TurnOutcome} returns this
*/
proto.lugo.TurnOutcome.prototype.setGameSnapshot = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lugo.TurnOutcome} returns this
 */
proto.lugo.TurnOutcome.prototype.clearGameSnapshot = function() {
  return this.setGameSnapshot(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lugo.TurnOutcome.prototype.hasGameSnapshot = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool score_changed = 2;
 * @return {boolean}
 */
proto.lugo.TurnOutcome.prototype.getScoreChanged = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.lugo.TurnOutcome} returns this
 */
proto.lugo.TurnOutcome.prototype.setScoreChanged = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool shot_clock_expired = 3;
 * @return {boolean}
 */
proto.lugo.TurnOutcome.prototype.getShotClockExpired = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.lugo.TurnOutcome} returns this
 */
proto.lugo.TurnOutcome.prototype.setShotClockExpired = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bool goal_zone_timer_expired = 4;
 * @return {boolean}
 */
proto.lugo.TurnOutcome.prototype.getGoalZoneTimerExpired = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.lugo.TurnOutcome} returns this
 */
proto.lugo.TurnOutcome.prototype.setGoalZoneTimerExpired = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lugo.RLResetConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.lugo.RLResetConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lugo.RLResetConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lugo.RLResetConfig.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lugo.RLResetConfig}
 */
proto.lugo.RLResetConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lugo.RLResetConfig;
  return proto.lugo.RLResetConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lugo.RLResetConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lugo.RLResetConfig}
 */
proto.lugo.RLResetConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lugo.RLResetConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lugo.RLResetConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lugo.RLResetConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lugo.RLResetConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


goog.object.extend(exports, proto.lugo);
